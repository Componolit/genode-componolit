
set build_components {
    core init
    timer
    drivers/vga_log
    drivers/usb
    drivers/ahci
    server/part_block
    server/rump_fs
    server/fs_log
    server/log_tee
    gravel/app/block_throughput
    app/log_core
}

source ${genode_dir}/repos/base/run/platform_drv.inc
append_platform_drv_build_components

build $build_components

create_boot_directory

append config {
<config>
    <parent-provides>
        <service name="ROM"/>
        <service name="RAM"/>
        <service name="IRQ"/>
        <service name="IO_MEM"/>
        <service name="IO_PORT"/>
        <service name="CAP"/>
        <service name="PD"/>
        <service name="RM"/>
        <service name="CPU"/>
        <service name="LOG"/>
        <service name="SIGNAL" />
    </parent-provides>
    <default-route>
        <any-service> <parent/> <any-child/> </any-service>
    </default-route>
    <default caps="100"/>
}
append_platform_drv_config
append config {
    <start name="timer">
        <resource name="RAM" quantum="1M"/>
        <provides>
            <service name="Timer"/>
        </provides>
    </start>

    <start name="block-test-throughput" caps="200">
        <resource name="RAM" quantum="512M"/>
        <config>
            <xml>
                <test request_size="2M" operation="read" data_size="1000G" buffer_size="200M" device="dev"/>
            </xml>
        </config>
        <route>
            <service name="LOG" label="XML"><child name="fs_log"/></service>
            <service name="Block"><child name="ahci_drv"/></service>
            <any-service><parent/><any-child/></any-service>
        </route>
    </start>

    <start name="usb_drv" caps="150">
        <resource name="RAM" quantum="16M"/>
        <provides>
            <service name="Input"/>
            <service name="Block"/>
        </provides>
        <config bios_handoff="yes" uhci="yes" ohci="yes" ehci="yes" xhci="yes">
            <hid/>
            <storage/>
        </config>
    </start>

    <start name="part_block">
        <resource name="RAM" quantum="8M"/>
        <provides>
            <service name="Block"/>
        </provides>
        <config>
            <policy label_prefix="rump_fs" partition="2" writeable="yes"/>
        </config>
        <route>
            <service name="Block"><child name="usb_drv"/></service>
            <any-service><parent/><any-child/></any-service>
        </route>
    </start>

    <start name="rump_fs" caps="200">
        <resource name="RAM" quantum="32M"/>
        <provides>
            <service name="File_system"/>
        </provides>
        <config fs="ext2fs">
            <policy label_prefix="fs_log" root="/" writeable="yes"/>
        </config>
        <route>
            <service name="Block"><child name="part_block"/></service>
            <any-service><parent/><any-child/></any-service>
        </route>
    </start>

    <start name="fs_log">
        <resource name="RAM" quantum="4M"/>
        <provides>
            <service name="LOG"/>
        </provides>
        <config>
            <policy label="block-test-throughput -> XML"/>
            <policy label="log_core -> log"/>
        </config>
    </start>

    <start name="vga_log_drv">
        <resource name="RAM" quantum="2M"/>
        <provides>
            <service name="LOG"/>
        </provides>
    </start>

    <start name="ahci_drv">
        <resource name="RAM" quantum="512M"/>
        <provides>
            <service name="Block"/>
        </provides>
        <config>
            <report ports="yes"/>
            <policy label_prefix="block-test-throughput" device="0" writeable="yes"/>
        </config>
    </start>

    <start name="log_core">
        <resource name="RAM" quantum="16M"/>
        <config period_ms="2000"/>
        <route>
            <service name="ROM" unscoped_label="log_core"><parent/></service>
            <service name="ROM" unscoped_label="ls.lib.so"><parent/></service>
            <service name="ROM" label="log"><parent label="core_log"/></service>
            <service name="LOG" label="log"><child name="log_tee"/></service>
            <any-service><parent/><any-child/></any-service>
        </route>
    </start>

    <start name="log_tee">
        <resource name="RAM" quantum="4M"/>
        <provides>
            <service name="LOG"/>
        </provides>
        <route>
            <service name="LOG" label_prefix="log_core ->"><child name="vga_log_drv"/></service>
            <service name="LOG"><child name="fs_log"/></service>
            <any-service><parent/><any-child/></any-service>
        </route>
    </start>

</config>
}

install_config $config

set boot_modules {
    core init
    ld.lib.so
    spark.lib.so
    basalt.lib.so
    gneiss.lib.so
    timer
    vga_log_drv
    usb_drv
    part_block
    rump_fs
    rump.lib.so
    rump_fs.lib.so
    fs_log
    ahci_drv
    block-test-throughput
    log_core
    log_tee
}

append_platform_drv_boot_modules

build_boot_image $boot_modules

set image "var/run/gravel/block_nuc_throughput.iso.2"
set cmd "dd if=/dev/zero bs=1M count=64 >> $image"
puts "creating image..."
exec -ignorestderr sh -c "cp var/run/gravel/block_nuc_throughput.iso $image" }
exec -ignorestderr sh -c $cmd
set cmd "/sbin/parted --script $image mkpart primary ext2 32MiB 100%"
puts "creating partition..."
exec -ignorestderr sh -c $cmd
set cmd "/sbin/mkfs.ext2 -F -E offset=33554432 $image"
puts "formatting partition..."
exec -ignorestderr sh -c $cmd
set testdisk "bin/testdisk.img"
set cmd "dd if=/dev/zero of=$testdisk bs=1M count=64"
puts "creating test disk..."
exec -ignorestderr sh -c $cmd

append qemu_args " -drive if=none,id=disk,file=$image"
append qemu_args " -usb -device usb-kbd"
append qemu_args " -device usb-ehci,id=ehci"
append qemu_args " -device usb-storage,bus=ehci.0,drive=disk"
append qemu_args " -device ahci,id=ahci -boot d -drive id=disk2,file=$testdisk,format=raw,if=none"
append qemu_args " -device ide-hd,drive=disk2,bus=ahci.0"
append qemu_args " -m 2048"

puts "to extend the data partition on a flashed device run:"
puts "$ dd if=$image of=/dev/sdX bs=1M"
puts "$ parted /dev/sdX resizepart 2 100%"
puts "$ e2fsck -f /dev/sdX2"
puts "$ resize2fs /dev/sdX2"

run_genode_until forever

